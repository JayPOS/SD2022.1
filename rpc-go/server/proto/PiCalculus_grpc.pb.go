// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package PiCalculus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PiCalculusClient is the client API for PiCalculus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PiCalculusClient interface {
	CalculatePiLeibniz(ctx context.Context, in *CalculusData, opts ...grpc.CallOption) (*CalculusData, error)
	CalculateNilakantha(ctx context.Context, in *CalculusData, opts ...grpc.CallOption) (*CalculusData, error)
}

type piCalculusClient struct {
	cc grpc.ClientConnInterface
}

func NewPiCalculusClient(cc grpc.ClientConnInterface) PiCalculusClient {
	return &piCalculusClient{cc}
}

func (c *piCalculusClient) CalculatePiLeibniz(ctx context.Context, in *CalculusData, opts ...grpc.CallOption) (*CalculusData, error) {
	out := new(CalculusData)
	err := c.cc.Invoke(ctx, "/PiCalculus/CalculatePiLeibniz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piCalculusClient) CalculateNilakantha(ctx context.Context, in *CalculusData, opts ...grpc.CallOption) (*CalculusData, error) {
	out := new(CalculusData)
	err := c.cc.Invoke(ctx, "/PiCalculus/CalculateNilakantha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PiCalculusServer is the server API for PiCalculus service.
// All implementations must embed UnimplementedPiCalculusServer
// for forward compatibility
type PiCalculusServer interface {
	CalculatePiLeibniz(context.Context, *CalculusData) (*CalculusData, error)
	CalculateNilakantha(context.Context, *CalculusData) (*CalculusData, error)
	mustEmbedUnimplementedPiCalculusServer()
}

// UnimplementedPiCalculusServer must be embedded to have forward compatible implementations.
type UnimplementedPiCalculusServer struct {
}

func (UnimplementedPiCalculusServer) CalculatePiLeibniz(context.Context, *CalculusData) (*CalculusData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculatePiLeibniz not implemented")
}
func (UnimplementedPiCalculusServer) CalculateNilakantha(context.Context, *CalculusData) (*CalculusData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateNilakantha not implemented")
}
func (UnimplementedPiCalculusServer) mustEmbedUnimplementedPiCalculusServer() {}

// UnsafePiCalculusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PiCalculusServer will
// result in compilation errors.
type UnsafePiCalculusServer interface {
	mustEmbedUnimplementedPiCalculusServer()
}

func RegisterPiCalculusServer(s grpc.ServiceRegistrar, srv PiCalculusServer) {
	s.RegisterService(&PiCalculus_ServiceDesc, srv)
}

func _PiCalculus_CalculatePiLeibniz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculusData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiCalculusServer).CalculatePiLeibniz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PiCalculus/CalculatePiLeibniz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiCalculusServer).CalculatePiLeibniz(ctx, req.(*CalculusData))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiCalculus_CalculateNilakantha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculusData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiCalculusServer).CalculateNilakantha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PiCalculus/CalculateNilakantha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiCalculusServer).CalculateNilakantha(ctx, req.(*CalculusData))
	}
	return interceptor(ctx, in, info, handler)
}

// PiCalculus_ServiceDesc is the grpc.ServiceDesc for PiCalculus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PiCalculus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PiCalculus",
	HandlerType: (*PiCalculusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculatePiLeibniz",
			Handler:    _PiCalculus_CalculatePiLeibniz_Handler,
		},
		{
			MethodName: "CalculateNilakantha",
			Handler:    _PiCalculus_CalculateNilakantha_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "PiCalculus.proto",
}
